name: Build and Push Docker Image to Google Artifacts Registry and Deploy to Dev Environment

on:
  push:
    branches: dev
  workflow_dispatch:

jobs:
  build-and-push-to-google-artifacts-registry:
    runs-on: ubuntu-latest
    environment: dev

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: "22"

      # - name: Install dependencies
      #   run: npm ci

      # - name: Run tests
      #   run: npm test -- --ci --reporters=default --reporters=jest-junit

      # - name: Test Report
      #   uses: dorny/test-reporter@v2
      #   if: success() || failure()
      #   with:
      #     name: Jest Tests
      #     path: junit.xml
      #     reporter: jest-junit

      - name: Google Auth
        id: auth # Add this ID
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true # Make sure this is set to true

      - name: Configure Docker to use gcloud credentials
        run: |
          gcloud auth configure-docker africa-south1-docker.pkg.dev --quiet

      - name: Debug Authentication
        run: |
          echo "Using service account: ${{ vars.GCP_SERVICE_ACCOUNT }}"
          gcloud auth list
          gcloud config list

          # Print full credential file (CAUTION: exposes secrets in logs)
          if [[ -f "$GOOGLE_APPLICATION_CREDENTIALS" ]]; then
            echo "===== CREDENTIAL FILE CONTENTS ====="
            cat $GOOGLE_APPLICATION_CREDENTIALS
            echo "=================================="
          else
            echo "Credential file does not exist at $GOOGLE_APPLICATION_CREDENTIALS"
          fi

          # Check access token provided by auth action
          echo "Access token available: ${{ steps.auth.outputs.access_token != '' }}"

      - name: Build, tag, and push image to Google Artifacts repository
        run: |

          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          docker build -f Dockerfile \
            --build-arg NODE_ENV=dev \
            --build-arg LOG_LEVEL=debug \
            --build-arg FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --build-arg FIREBASE_WEB_API_KEY=${{ secrets.FIREBASE_WEB_API_KEY }} \
            --build-arg FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }} \
            --build-arg GMAIL_USER=${{ secrets.GMAIL_USER }} \
            --build-arg GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }} \
            --build-arg EMAIL_FROM_ALIAS=${{ vars.EMAIL_FROM_ALIAS }} \
            -t africa-south1-docker.pkg.dev/${{ secrets.FIREBASE_PROJECT_ID }}/from-the-hart-tech/from-the-hart-auth:$TIMESTAMP .

          docker push africa-south1-docker.pkg.dev/${{ secrets.FIREBASE_PROJECT_ID }}/from-the-hart-tech/from-the-hart-auth:$TIMESTAMP

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.2"

      - name: Deploy Dev Environment
        run: |
          cd terraform/dev
          terraform init
          terraform apply -auto-approve \
            -var="auth_image_uri=africa-south1-docker.pkg.dev/${{ secrets.FIREBASE_PROJECT_ID }}/from-the-hart-tech/from-the-hart-auth:$TIMESTAMP"
